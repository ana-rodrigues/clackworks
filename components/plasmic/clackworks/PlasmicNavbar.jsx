// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ggKD3RisT9Ubzud33WNkiG
// Component: jQ3WjwLWnw
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonGhost from "../../ButtonGhost"; // plasmic-import: k69n-JZyE6/component
import { useScreenVariants as useScreenVariantsfWbazDhpHIcD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fWbazDhpHIc_D/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_clackworks.module.css"; // plasmic-import: ggKD3RisT9Ubzud33WNkiG/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: jQ3WjwLWnw/css

export const PlasmicNavbar__VariantProps = new Array();

export const PlasmicNavbar__ArgProps = new Array();

export const defaultNavbar__Args = {};

function PlasmicNavbar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultNavbar__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfWbazDhpHIcD()
  });

  return (
    <div
      data-plasmic-name={"container"}
      data-plasmic-override={overrides.container}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.container
      )}
    >
      <p.PlasmicLink
        data-plasmic-name={"home"}
        data-plasmic-override={overrides.home}
        className={classNames(projectcss.all, projectcss.a, sty.home)}
        component={Link}
        href={"/"}
        platform={"nextjs"}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={
            hasVariant(globalVariants, "screen", "mobileOnly") ? "16px" : "24px"
          }
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/clackworks/images/logopng.png",
            fullWidth: 3088,
            fullHeight: 372,
            aspectRatio: undefined
          }}
        />
      </p.PlasmicLink>

      <ButtonGhost
        data-plasmic-name={"linkItem"}
        data-plasmic-override={overrides.linkItem}
        className={classNames("__wab_instance", sty.linkItem)}
      />
    </div>
  );
}

const PlasmicDescendants = {
  container: ["container", "home", "img", "linkItem"],
  home: ["home", "img"],
  img: ["img"],
  linkItem: ["linkItem"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNavbar__ArgProps,
      internalVariantPropNames: PlasmicNavbar__VariantProps
    });

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "container") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("container"),
  {
    // Helper components rendering sub-elements
    home: makeNodeComponent("home"),
    img: makeNodeComponent("img"),
    linkItem: makeNodeComponent("linkItem"),
    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
