// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ggKD3RisT9Ubzud33WNkiG
// Component: k69n-JZyE6
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_clackworks.module.css"; // plasmic-import: ggKD3RisT9Ubzud33WNkiG/projectcss
import sty from "./PlasmicButtonGhost.module.css"; // plasmic-import: k69n-JZyE6/css

export const PlasmicButtonGhost__VariantProps = new Array();

export const PlasmicButtonGhost__ArgProps = new Array();

export const defaultButtonGhost__Args = {};

function PlasmicButtonGhost__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultButtonGhost__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const [isRootFocus, triggerRootFocusProps] = useTrigger("useFocused", {});
  const triggers = {
    hoverFocus_root: isRootHover && isRootFocus
  };

  return (
    <p.PlasmicLink
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={"https://www.plasmic.app/"}
      platform={"nextjs"}
      data-plasmic-trigger-props={[
        triggerRootHoverProps,
        triggerRootFocusProps
      ]}
    >
      {triggers.hoverFocus_root ? "Blog" : "Blog"}
    </p.PlasmicLink>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicButtonGhost__ArgProps,
      internalVariantPropNames: PlasmicButtonGhost__VariantProps
    });

    return PlasmicButtonGhost__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonGhost";
  } else {
    func.displayName = `PlasmicButtonGhost.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonGhost = Object.assign(
  // Top-level PlasmicButtonGhost renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicButtonGhost
    internalVariantProps: PlasmicButtonGhost__VariantProps,
    internalArgProps: PlasmicButtonGhost__ArgProps
  }
);

export default PlasmicButtonGhost;
/* prettier-ignore-end */
