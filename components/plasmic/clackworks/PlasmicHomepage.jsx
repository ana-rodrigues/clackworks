// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ggKD3RisT9Ubzud33WNkiG
// Component: u0sNXC5X5Hnc
import * as React from "react";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: jQ3WjwLWnw/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_clackworks.module.css"; // plasmic-import: ggKD3RisT9Ubzud33WNkiG/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: u0sNXC5X5Hnc/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

export const defaultHomepage__Args = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <React.Fragment>
      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"layout"}
          data-plasmic-override={overrides.layout}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.layout
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <label
            data-plasmic-name={"label"}
            data-plasmic-override={overrides.label}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.label
            )}
          >
            {"Label"}
          </label>

          <p
            data-plasmic-name={"p"}
            data-plasmic-override={overrides.p}
            className={classNames(
              projectcss.all,
              projectcss.p,
              projectcss.__wab_text,
              sty.p
            )}
          >
            {
              "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque finibus lacus ut lacus placerat malesuada. In hac habitasse platea dictumst. Vivamus elementum porta nunc, rutrum ullamcorper tortor sodaDonec rutrum turpis quis nisl interdum, sed consequat metus consectetur. Aenean a nisl id turpis interdum euismod ac quis ipsum. Sed a turpis imperdiet, iaculis nulla sed, viverra massa. Integer elit tortor, eleifend nec nulla non, maximus placerat tellus. Proin dignissim, nibh sit amet venenatis eleifend, arcu tortor pharetra ipsum, sit amet lobortis erat ex non odio. Phasellus pellentesque condimentum sollicitudin. Phasellus iaculis, erat vitae ultricies vehicula, tellus elit posuere ex, commodo aliquam orci erat ut elit. Vestibulum commodo condimentum dui facilisis pellentesque. Suspendisse sit amet est vitae ante luctus blandit. Ut est lorem, varius in augue sed, tempor convallis risus. Quisque nunc nisi, pharetra non mauris sed, tincidunt convallis metus."
            }
          </p>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  layout: ["layout", "navbar", "label", "p"],
  navbar: ["navbar"],
  label: ["label"],
  p: ["p"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "layout") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("layout"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    label: makeNodeComponent("label"),
    p: makeNodeComponent("p"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
