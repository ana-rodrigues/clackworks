// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ggKD3RisT9Ubzud33WNkiG
// Component: 8uLYq857Fx
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../clackworks/plasmic_clackworks.module.css"; // plasmic-import: ggKD3RisT9Ubzud33WNkiG/projectcss
import sty from "./PlasmicTabLink.module.css"; // plasmic-import: 8uLYq857Fx/css

export const PlasmicTabLink__VariantProps = new Array();

export const PlasmicTabLink__ArgProps = new Array("children");

export const defaultTabLink__Args = {};

function PlasmicTabLink__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultTabLink__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, sty.text)}
      >
        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(projectcss.all, projectcss.a, sty.link)}
          component={Link}
          platform={"nextjs"}
        >
          {p.renderPlasmicSlot({
            defaultContents: <p.Trans>{"Pronto a usar"}</p.Trans>,
            value: args.children,
            className: classNames(sty.slotTargetChildren)
          })}
        </p.PlasmicLink>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "text", "link"],
  text: ["text", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTabLink__ArgProps,
      internalVariantPropNames: PlasmicTabLink__VariantProps
    });

    return PlasmicTabLink__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTabLink";
  } else {
    func.displayName = `PlasmicTabLink.${nodeName}`;
  }
  return func;
}

export const PlasmicTabLink = Object.assign(
  // Top-level PlasmicTabLink renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicTabLink
    internalVariantProps: PlasmicTabLink__VariantProps,
    internalArgProps: PlasmicTabLink__ArgProps
  }
);

export default PlasmicTabLink;
/* prettier-ignore-end */
