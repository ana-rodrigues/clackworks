// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ggKD3RisT9Ubzud33WNkiG
// Component: CWGZEjAICQ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import ArticleTag from "../../ArticleTag"; // plasmic-import: kPmElHXrXA/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "../clackworks/plasmic_clackworks.module.css"; // plasmic-import: ggKD3RisT9Ubzud33WNkiG/projectcss
import sty from "./PlasmicArticleCard.module.css"; // plasmic-import: CWGZEjAICQ/css

export const PlasmicArticleCard__VariantProps = new Array();

export const PlasmicArticleCard__ArgProps = new Array(
  "articleImage",
  "slot",
  "slot2"
);

export const defaultArticleCard__Args = {};

function PlasmicArticleCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultArticleCard__Args, props.args);
  const $props = args;
  const $ctx = ph.useDataEnv?.() || {};
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"articleCard"}
      data-plasmic-override={overrides.articleCard}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.articleCard
      )}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img___5AGvq)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/clackwrks/images/variationCpng.png",
              fullWidth: 420,
              fullHeight: 489,
              aspectRatio: undefined
            }}
          />
        ),

        value: args.articleImage
      })}

      <p.Stack
        as={"div"}
        data-plasmic-name={"articleInfo"}
        data-plasmic-override={overrides.articleInfo}
        hasGap={true}
        className={classNames(projectcss.all, sty.articleInfo)}
      >
        <ArticleTag
          data-plasmic-name={"articleTag"}
          data-plasmic-override={overrides.articleTag}
          className={classNames("__wab_instance", sty.articleTag)}
        />

        {p.renderPlasmicSlot({
          defaultContents: "A guide to keyboard switches",
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}

        {p.renderPlasmicSlot({
          defaultContents:
            "Not all keyboards are designed the same. Hereâ€™s what you need to know as a  non-English writer getting into custom keyboards.",
          value: args.slot2,
          className: classNames(sty.slotTargetSlot2)
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  articleCard: ["articleCard", "articleInfo", "articleTag"],
  articleInfo: ["articleInfo", "articleTag"],
  articleTag: ["articleTag"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicArticleCard__ArgProps,
      internalVariantPropNames: PlasmicArticleCard__VariantProps
    });

    return PlasmicArticleCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "articleCard") {
    func.displayName = "PlasmicArticleCard";
  } else {
    func.displayName = `PlasmicArticleCard.${nodeName}`;
  }
  return func;
}

export const PlasmicArticleCard = Object.assign(
  // Top-level PlasmicArticleCard renders the root element
  makeNodeComponent("articleCard"),
  {
    // Helper components rendering sub-elements
    articleInfo: makeNodeComponent("articleInfo"),
    articleTag: makeNodeComponent("articleTag"),
    // Metadata about props expected for PlasmicArticleCard
    internalVariantProps: PlasmicArticleCard__VariantProps,
    internalArgProps: PlasmicArticleCard__ArgProps
  }
);

export default PlasmicArticleCard;
/* prettier-ignore-end */
